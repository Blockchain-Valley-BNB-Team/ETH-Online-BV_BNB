/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  
export declare namespace ResearchRegistry {
      
    export type ResearchResultStruct = {researcher: AddressLike, resultData: string, timestamp: BigNumberish, sessionId: string}

    export type ResearchResultStructOutput = [researcher: string, resultData: string, timestamp: bigint, sessionId: string] & {researcher: string, resultData: string, timestamp: bigint, sessionId: string }
  
    }

  export interface ResearchRegistryInterface extends Interface {
    getFunction(nameOrSignature: "getLatestResearch" | "getResearch" | "getResearchCount" | "researchCount" | "researchResults" | "storeResearch"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "ResearchStored"): EventFragment;

    encodeFunctionData(functionFragment: 'getLatestResearch', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getResearch', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getResearchCount', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'researchCount', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'researchResults', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'storeResearch', values: [AddressLike, string, string]): string;

    decodeFunctionResult(functionFragment: 'getLatestResearch', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getResearch', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getResearchCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'researchCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'researchResults', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'storeResearch', data: BytesLike): Result;
  }

  
    export namespace ResearchStoredEvent {
      export type InputTuple = [researcher: AddressLike, researchId: BigNumberish, sessionId: string, timestamp: BigNumberish];
      export type OutputTuple = [researcher: string, researchId: bigint, sessionId: string, timestamp: bigint];
      export interface OutputObject {researcher: string, researchId: bigint, sessionId: string, timestamp: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface ResearchRegistry extends BaseContract {
    
    connect(runner?: ContractRunner | null): ResearchRegistry;
    waitForDeployment(): Promise<this>;

    interface: ResearchRegistryInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    getLatestResearch: TypedContractMethod<
      [_researcher: AddressLike, ],
      [ResearchRegistry.ResearchResultStructOutput],
      'view'
    >
    

    
    getResearch: TypedContractMethod<
      [_researcher: AddressLike, _researchId: BigNumberish, ],
      [ResearchRegistry.ResearchResultStructOutput],
      'view'
    >
    

    
    getResearchCount: TypedContractMethod<
      [_researcher: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    researchCount: TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    researchResults: TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [[string, string, bigint, string] & {researcher: string, resultData: string, timestamp: bigint, sessionId: string }],
      'view'
    >
    

    
    storeResearch: TypedContractMethod<
      [_researcher: AddressLike, _resultData: string, _sessionId: string, ],
      [bigint],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'getLatestResearch'): TypedContractMethod<
      [_researcher: AddressLike, ],
      [ResearchRegistry.ResearchResultStructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'getResearch'): TypedContractMethod<
      [_researcher: AddressLike, _researchId: BigNumberish, ],
      [ResearchRegistry.ResearchResultStructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'getResearchCount'): TypedContractMethod<
      [_researcher: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'researchCount'): TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'researchResults'): TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [[string, string, bigint, string] & {researcher: string, resultData: string, timestamp: bigint, sessionId: string }],
      'view'
    >;
getFunction(nameOrSignature: 'storeResearch'): TypedContractMethod<
      [_researcher: AddressLike, _resultData: string, _sessionId: string, ],
      [bigint],
      'nonpayable'
    >;

    getEvent(key: 'ResearchStored'): TypedContractEvent<ResearchStoredEvent.InputTuple, ResearchStoredEvent.OutputTuple, ResearchStoredEvent.OutputObject>;

    filters: {
      
      'ResearchStored(address,uint256,string,uint256)': TypedContractEvent<ResearchStoredEvent.InputTuple, ResearchStoredEvent.OutputTuple, ResearchStoredEvent.OutputObject>;
      ResearchStored: TypedContractEvent<ResearchStoredEvent.InputTuple, ResearchStoredEvent.OutputTuple, ResearchStoredEvent.OutputObject>;
    
    };
  }