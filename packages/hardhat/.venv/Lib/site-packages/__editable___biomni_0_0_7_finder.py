from __future__ import annotations
import sys
from importlib.machinery import ModuleSpec, PathFinder
from importlib.machinery import all_suffixes as module_suffixes
from importlib.util import spec_from_file_location
from itertools import chain
from pathlib import Path

MAPPING: dict[str, str] = {'biomni': 'D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\biomni', 'biomni_env': 'D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\biomni_env', 'data': 'D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\data', 'docs': 'D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\docs', 'figs': 'D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\figs', 'scripts': 'D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\scripts'}
NAMESPACES: dict[str, list[str]] = {'biomni_env': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\biomni_env'], 'data': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\data'], 'docs': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\docs'], 'figs': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\figs'], 'scripts': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\scripts'], 'biomni.biorxiv_scripts': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\biomni\\biorxiv_scripts'], 'biomni.tool.example_mcp_tools': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\biomni\\tool\\example_mcp_tools'], 'biomni.tool.schema_db': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\biomni\\tool\\schema_db'], 'biomni.tool.tool_description': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\biomni\\tool\\tool_description'], 'biomni_env.biomni_tools': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\biomni_env\\biomni_tools'], 'biomni_env.biomni_tools.bin': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\biomni_env\\biomni_tools\\bin'], 'biomni_env.biomni_tools.bwa': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\biomni_env\\biomni_tools\\bwa'], 'biomni_env.biomni_tools.fasttree': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\biomni_env\\biomni_tools\\fasttree'], 'biomni_env.biomni_tools.gcta': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\biomni_env\\biomni_tools\\gcta'], 'biomni_env.biomni_tools.homer': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\biomni_env\\biomni_tools\\homer'], 'biomni_env.biomni_tools.iq-tree': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\biomni_env\\biomni_tools\\iq-tree'], 'biomni_env.biomni_tools.muscle': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\biomni_env\\biomni_tools\\muscle'], 'biomni_env.biomni_tools.plink_2_0': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\biomni_env\\biomni_tools\\plink_2_0'], 'biomni_env.biomni_tools.bwa.bwakit': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\biomni_env\\biomni_tools\\bwa\\bwakit'], 'biomni_env.biomni_tools.gcta.__MACOSX': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\biomni_env\\biomni_tools\\gcta\\__MACOSX'], 'biomni_env.biomni_tools.homer.homer': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\biomni_env\\biomni_tools\\homer\\homer'], 'biomni_env.biomni_tools.iq-tree.bin': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\biomni_env\\biomni_tools\\iq-tree\\bin'], 'data.biomni_data': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\data\\biomni_data'], 'data.biomni_data.benchmark': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\data\\biomni_data\\benchmark'], 'data.biomni_data.data_lake': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\data\\biomni_data\\data_lake'], 'data.biomni_data.benchmark.DbQA': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\data\\biomni_data\\benchmark\\DbQA'], 'data.biomni_data.benchmark.hle': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\data\\biomni_data\\benchmark\\hle'], 'data.biomni_data.benchmark.SeqQA': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\data\\biomni_data\\benchmark\\SeqQA'], 'docs.source': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\docs\\source'], 'scripts.outputs': ['D:\\Develop\\BV_BNB\\packages\\backend\\Biomni\\scripts\\outputs']}
PATH_PLACEHOLDER = '__editable__.biomni-0.0.7.finder' + ".__path_hook__"


class _EditableFinder:  # MetaPathFinder
    @classmethod
    def find_spec(cls, fullname: str, path=None, target=None) -> ModuleSpec | None:  # type: ignore
        # Top-level packages and modules (we know these exist in the FS)
        if fullname in MAPPING:
            pkg_path = MAPPING[fullname]
            return cls._find_spec(fullname, Path(pkg_path))

        # Handle immediate children modules (required for namespaces to work)
        # To avoid problems with case sensitivity in the file system we delegate
        # to the importlib.machinery implementation.
        parent, _, child = fullname.rpartition(".")
        if parent and parent in MAPPING:
            return PathFinder.find_spec(fullname, path=[MAPPING[parent]])

        # Other levels of nesting should be handled automatically by importlib
        # using the parent path.
        return None

    @classmethod
    def _find_spec(cls, fullname: str, candidate_path: Path) -> ModuleSpec | None:
        init = candidate_path / "__init__.py"
        candidates = (candidate_path.with_suffix(x) for x in module_suffixes())
        for candidate in chain([init], candidates):
            if candidate.exists():
                return spec_from_file_location(fullname, candidate)
        return None


class _EditableNamespaceFinder:  # PathEntryFinder
    @classmethod
    def _path_hook(cls, path) -> type[_EditableNamespaceFinder]:
        if path == PATH_PLACEHOLDER:
            return cls
        raise ImportError

    @classmethod
    def _paths(cls, fullname: str) -> list[str]:
        paths = NAMESPACES[fullname]
        if not paths and fullname in MAPPING:
            paths = [MAPPING[fullname]]
        # Always add placeholder, for 2 reasons:
        # 1. __path__ cannot be empty for the spec to be considered namespace.
        # 2. In the case of nested namespaces, we need to force
        #    import machinery to query _EditableNamespaceFinder again.
        return [*paths, PATH_PLACEHOLDER]

    @classmethod
    def find_spec(cls, fullname: str, target=None) -> ModuleSpec | None:  # type: ignore
        if fullname in NAMESPACES:
            spec = ModuleSpec(fullname, None, is_package=True)
            spec.submodule_search_locations = cls._paths(fullname)
            return spec
        return None

    @classmethod
    def find_module(cls, _fullname) -> None:
        return None


def install():
    if not any(finder == _EditableFinder for finder in sys.meta_path):
        sys.meta_path.append(_EditableFinder)

    if not NAMESPACES:
        return

    if not any(hook == _EditableNamespaceFinder._path_hook for hook in sys.path_hooks):
        # PathEntryFinder is needed to create NamespaceSpec without private APIS
        sys.path_hooks.append(_EditableNamespaceFinder._path_hook)
    if PATH_PLACEHOLDER not in sys.path:
        sys.path.append(PATH_PLACEHOLDER)  # Used just to trigger the path hook
